course_id,lesson_id,,,,
PowerShell Fundamentals,Discovering commands,,,,
step_prompt,requires_input_flag,execute_code_flag,store_var_flag,solution,variable
"Throughout your PowerShell journey, you'll often find yourself in the situation where you know what you want to do, but you're not sure what commands you need to use.",,,,,
This lesson will explore the process of discovering new commands for accomplishing your tasks. ,,,,,
"I hope that by the end, you'll come to appreciate that PowerShell offers a rich variety of built-in resources for finding exactly what you need. And just as important, these resources require minimal effort and interruption of your flow of thinking. ",,,,,
"As a starting point, let's consider the most broad question possible: How do I get a list of all available commands?",,,,,
You may be surprised that it is quite easy to answer this question with a particular command : Get-Command. ,,,,,
"In general, you probably don't want a full list, since there are so many entries in the list, mostly probably irrelevant to your immediate goals, but you may occasionally want to take a glance through it, just to see what's out there. ",,,,,
"I've sampled a small random subset of the output of Get-Command stored the result in the variable $gcm. Type ""$gcm"" into the console to examine this subset. ",,1,1,"""cmdlet"",""function""| Select-Object  @{name=""type"";e={$_}}, @{name=""max"";e={(gcm -CommandType $_ | mo -Line).Lines}} |ForEach-Object {gcm -CommandType $_.type | select -first 3 -skip (Get-Random -Minimum 1 -Maximum ($_.max - 2))} |Select Name, Verb, Noun| ft -autosize",gcm
"As you can see, I've organized the results into a table with 5 columns: Name, Verb, Noun, Module, and CommandType. ",,,,,
"The general naming convention for PowerShell commands follows a simple, predictable pattern. It has the form 'Verb-Noun', where Verb is some action that the command is doing and 'Noun' is the object being acted upon",,,,,
This common format makes it easy to search for commands given you know or can make a good guess at the verb or noun involved. ,,,,,
Try to see for yourself. First use the expression 'Get-Command -Noun <noun>'  to find commands that deal with CSV files,1,1,,gcm -noun csv,
Now look at commands that deal with creating objects using the 'New' Verb plugging into the expression 'Get-Command -Verb <verb>',1,1,,gcm -verb new,
Related commands will often have nouns in common and the verbs will vary depending on the action required. ,,,,,
"For example, there are 5 commands included in PowerShell for dealing with Windows processes. ",,,,,
"Each has the noun 'Process' and a different verb for each action performed: Get, Start, Stop, Wait, and Debug",,,,,
"Now, for the final part of this lesson, let's go over a few common terms and distinctions you'll see all over PowerShell.",,,,,
"When I used the word ""command"" earlier in the lesson, I actually had in mind 3 distinct kinds of objects: cmdlets, functions, and aliases. ",,,,,
"Functionally, there isn't a difference between the three, but they are different underneath the hood. ",,,,,
"Cmdlets are a type of command that are written in a .NET lanaguage like C#. In other words, cmdlets are developed outside of the PowerShell environment.",,,,,
"On the other hand, functions, and their cousins the advanced functions (which behave very similarly to cmdlets), are commands that are developed completely with PowerShell's built in scripting language. ",,,,,
"And finally, aliases are not independent commands in their own right, but rather abbreviations for cmdlets or functions. Besides the name used, everything else, including the parameter interface and functionality, is precisely the same as the cmdlet/function it references. ",,,,,
You can use the alias 'gcm' to call Get-Command with much fewer characters. Try using it now with the -Noun parameter to find all commands which work with the noun 'Service',1,,,gcm -noun service ,
PowerShell comes with a variety of different aliases built in. You can use the command 'Get-Alias' to get a list of them all.,,,,,
We will see later that we have total control over prepackaged aliases and the creation of new aliases. With a few keystrokes we can redefine any system defined aliases and define our own aliases for existing commands or commands we write ourselves.,,,,,
"That wraps our lesson on discovering commands. In the next lesson, we will explore how to get into the gory details of syntax and usage of commands using the wonderfully useful help system. ",,,,,
